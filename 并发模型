线程容易理解 他是通过cpu缓存锁 以及线程共享同步来实现的，而事件驱动呢？我的理解是事件驱动 其实就是消息驱动 消息是信封，事件是信函 
也就是事件的模式通过消息来传递，
这样放大到上面的并发编程来看，也就是说本质上 那些JMS 消息中间件 是基于事件驱动的并发编程，只不过他是通过并发异步队列来作为共享区 
解决了远程时间空间的问题，同理EJB 消息驱动bean 我的理解应该也是事件（消息）驱动的并发，
甚至在后面我们讲的actor 模型 本质上我认为跟jms 这些消息中间件很相识，只是他不在采用并发队列共享数据，而是每一次通过发送消息实现交互。 
以上只是我的理解 所以不一定正确。后面有时间我会讲到dispatcher 无锁并发框架 还有actor的角色模型的并发框架。

强引用:哪怕OOM异常也不会回收
软引用:当要出现OOM的时候，如果回收了一波内存还不够，这才抛出OOM,弱引用回收的时候如果设置了引用队列，
      那么这个软引用还会进一次引用队列，但是引用所指向的对象已经被回收.
弱引用:WeakReference，只要垃圾回收一触发，该对象就被回收了
    -->hreadLocalMap本质上也是个Map,其中Key是我们的ThreadLocal这个对象，Value就是我们在ThreadLocal中保存的值。
    也就是说我们的ThreadLocal保存和取对象都是通过Thread中的ThreadLocalMap来操作的，而key就是本身。在ThreadLocalMap中Entry有如下定义:

    static class Entry extends WeakReference<ThreadLocal<?>> {
            /** The value associated with this ThreadLocal. */
            Object value;

            Entry(ThreadLocal<?> k, Object v) {
                super(k);
                value = v;
            }
        }
        
      -->在做threadlocal.get()操作，证明其实还是有强引用存在的。所以key并不为null。如果我们的强引用不存在的话，那么Key就会被回收，
      也就是会出现我们value没被回收，key被回收，导致value永远存在，出现内存泄漏。这也是ThreadLocal经常会被很多书籍提醒到需要remove()的原因;
      -->很多源码的ThreadLocal并没有写remove依然再用得很好呢？那其实是因为很多源码经常是作为静态变量存在的生命周期和Class是一样的，
      而remove需要再那些方法或者对象里面使用ThreadLocal，因为方法栈或者对象的销毁从而强引用丢失，导致内存泄漏.
